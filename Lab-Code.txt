#include <windows.h>  // for MS Windows

#include <GL/glut.h>  // GLUT, include glu.h and gl.h



void display() {

// Set background color to black and opaque

glClear(GL_COLOR_BUFFER_BIT);         // Clear the color buffer (background)



    glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
	glClear(GL_COLOR_BUFFER_BIT);         // Clear the color buffer (background)
	glLineWidth(7);

	glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
	glColor3f(0.8f, 0.0f, 0.0f);
    glVertex2f(0.22f, -0.8f); // Red
    glVertex2f(-0.50f, -0.8f);
	glVertex2f(-0.50f, 0.40f);    // x, y
	glVertex2f(0.22f, 0.40f);

	glEnd();

   	glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
	glColor3f(1.0f, 1.0f, 1.0f);
    glVertex2f(1.0f, 0.1f); // Red
    glVertex2f(-1.0f, 0.1f);
	glVertex2f(-1.0f, 0.12f);    // x, y
	glVertex2f(1.0f, 0.12f);

	glEnd();

		glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
	glColor3f(1.0f, 1.0f, 1.0f);
    glVertex2f(1.0f, -0.13f); // Red
    glVertex2f(-1.0f, -0.13f);
	glVertex2f(-1.0f, -0.15f);    // x, y
	glVertex2f(1.0f, -0.15f);

	glEnd();
   glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
	glColor3f(1.0f, 1.0f, 1.0f);
    glVertex2f(-0.15f, -0.14f); // Red
    glVertex2f(-0.167f, -0.14f);
    glVertex2f(-0.167f, -0.8f); // Red

     glVertex2f(-0.15f, -0.8f);


	glEnd();
    glBegin(GL_LINES);
	glColor3f(0.0f, 0.64f, 0.91f); // Red
	glVertex2f(-0.34f, -0.3f);    // x, y
	glVertex2f(-0.43f, -0.48f);

	glColor3f(0.0f, 0.64f, 0.91f); // Red
	glVertex2f(-0.34f, -0.3f);    // x, y
	glVertex2f(-0.25f, -0.48f);

	glColor3f(0.0f, 0.64f, 0.91f); // Red
	glVertex2f(-0.34f, -0.65f);    // x, y
	glVertex2f(-0.43f, -0.48f);

	glColor3f(0.0f, 0.64f, 0.91f); // Red
	glVertex2f(-0.34f, -0.65f);    // x, y
	glVertex2f(-0.25f, -0.48f);

	//right diamond

	glColor3f(0.0f, 0.64f, 0.91f); // Red
	glVertex2f(0.06f, -0.3f);    // x, y
	glVertex2f(0.15f, -0.48f);

    glVertex2f(0.06f, -0.3f);    // x, y
	glVertex2f(-0.03f, -0.48f);

    glVertex2f(0.06f, -0.65f);    // x, y
	glVertex2f(0.15f, -0.48f);


    glVertex2f(0.06f, -0.65f);    // x, y
	glVertex2f(-0.03f, -0.48f);

    //lines

    glVertex2f(-0.24f,0.25f);    // x, y
	glVertex2f(0.0f, 0.25f);

    glVertex2f(-0.24f,-0.01f);    // x, y
	glVertex2f(0.0f, -0.01f);

	glEnd();


   //glLineWidth(7);

   glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
	glColor3f(0.53f, 0.0f, 0.08f);
    glVertex2f(-0.3f, 0.4f); // Red
    glVertex2f(-0.3f, 0.44f);
    glVertex2f(0.05f, 0.44f);
	glVertex2f(0.05f, 0.4f);    // x, y


	glEnd();

	  glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
	glColor3f(0.44f, 0.22f, 0.09f);
    glVertex2f(-0.22f, 0.44f); // Red
    glVertex2f(-0.22f, 0.475f);
    glVertex2f(-0.03f, 0.475f);
    glVertex2f(-0.03f, 0.44f);
   // x, y


	glEnd();


	  glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
	glColor3f(0.44f, 0.22f, 0.09f);
    glVertex2f(-0.135f, 0.7f); // Red
    glVertex2f(-0.135f, 0.475f);
    glVertex2f(-0.11f, 0.475f);
    glVertex2f(-0.11f, 0.7f);
   // x, y


	glEnd();


	  glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
	glColor3f(0.44f, 0.22f, 0.09f);
    glVertex2f(-0.155f, 0.6f); // Red
    glVertex2f(-0.155f, 0.57f);
    glVertex2f(-0.09f, 0.57f);
    glVertex2f(-0.09f, 0.6f);
   // x, y


	glEnd();

	 glBegin(GL_POLYGON);
    glColor3f(0.97f, 0.84f, 0.19f);
    glVertex2f(-0.29f, 0.7f);
    glVertex2f(0.05f, 0.7f);
    glVertex2f(-0.05f, 0.9f);
    glVertex2f(-0.18f, 0.9f);


	glEnd();
    glBegin(GL_LINES);
	glColor3f(0.53f, 0.00f, 0.08f); // Red
     glVertex2f(-0.29f, 0.7f); // Red
     glVertex2f(0.05f, 0.7f);

    glVertex2f(-0.05f, 0.9f);
    glVertex2f(-0.18f, 0.9f);

    glVertex2f(-0.05f, 0.9f);
    glVertex2f(0.05f, 0.7f);

     glVertex2f(-0.29f, 0.7f);
     glVertex2f(-0.18f, 0.9f);

	glEnd();

glFlush();  // Render now

}



/* Main function: GLUT runs as a console application starting at main()  */

int main(int argc, char** argv) {

glutInit(&argc, argv);                 // Initialize GLUT

glutInitWindowSize(720,1080);

glutCreateWindow("Lab Work"); // Create a window with the given title
  // Set the window's initial width & height

glutDisplayFunc(display); // Register display callback handler for window re-paint

glutMainLoop();           // Enter the event-processing loop

return 0;

}
